syntax = "proto3";

package model;

option java_package = "org.oppia.android.app.model";
option java_multiple_files = true;

// Structure for an event log.
message EventLog {
  // The timestamp of the event.
  int64 timestamp = 1;
  // The action happening in the event.
  EventAction action_name = 2;
  // The priority of the event.
  Priority priority = 3;
  // The activity context of the event.
  Context context = 4;

  // Structure of an activity context.
  message Context {
    oneof activity_context {
      // The event being logged is related to exploration.
      ExplorationContext exploration_context = 1;

      // The event being logged is related to the question player.
      QuestionContext question_context = 2;

      // The event being logged is related to the topic activity.
      TopicContext topic_context = 3;

      // The event being logged is related to the story activity.
      StoryContext story_context = 4;

      // The event being logged is related to the concept card.
      ConceptCardContext concept_card_context = 5;

      // The event being logged is related to the revision card.
      RevisionCardContext revision_card_context = 6;

      // The event being logged is related to starting an exploration card.
      CardContext start_card_context = 7;

      // The event being logged is related to ending an exploration card.
      CardContext end_card_context = 8;

      // The event being logged is related to offering a hint when it becomes available.
      HintContext hint_offered_context = 9;

      // The event being logged is related to accessing a hint.
      HintContext access_hint_context = 10;

      // The event being logged is related to offering a solution when it becomes available.
      ExplorationDetailsContext solution_offered_context = 11;

      // The event being logged is related to accessing a solution.
      ExplorationDetailsContext access_solution_context = 12;

      // The event being logged is related to submitting an answer.
      SubmitAnswerContext submit_answer_context = 13;

      // The event being logged is related to playing a voiceover.
      PlayVoiceOverContext play_voice_over_context = 14;

      // The event being logged is related to backgrounding of the application.
      LearnerDetailsContext app_in_background_context = 15;

      // The event being logged is related to foregrounding of the application.
      LearnerDetailsContext app_in_foreground_context = 16;

      // The event being logged is related to exiting an exploration.
      ExplorationDetailsContext exit_exploration_context = 17;

      // The event being logged is related to finishing an exploration.
      ExplorationDetailsContext finish_exploration_context = 18;

      // The event being logged is related to resuming an exploration.
      LearnerDetailsContext resume_exploration_context = 19;

      // The event being logged is related to restarting an exploration.
      LearnerDetailsContext start_over_exploration_context = 20;

      // The event being logged is related to deleting a profile.
      LearnerDetailsContext delete_profile_context = 21;
    }
  }

  // Structure of an exploration context.
  message ExplorationContext {
    // The active topic ID when the event is logged.
    string topic_id = 1;
    // The active story ID when the event is logged.
    string story_id = 2;
    // The active exploration ID when the event is logged.
    string exploration_id = 3;
  }

  // Structure of a question context.
  message QuestionContext {
    // The active question ID when the event is logged.
    string question_id = 1;
    // The IDs of skills to which this question is associated.
    repeated string skill_id = 2;
  }

  // Structure of a topic context.
  message TopicContext {
    // The active topic ID when the event is logged.
    string topic_id = 1;
  }

  // Structure of a story context.
  message StoryContext {
    // The active topic ID when the event is logged.
    string topic_id = 1;
    // The active story ID when the event is logged.
    string story_id = 2;
  }

  // Structure of a concept card context.
  message ConceptCardContext {
    // The active skill ID when the event is logged.
    string skill_id = 1;
  }

  // Structure of a revision card context.
  message RevisionCardContext {
    // The active topic ID when the event is logged.
    string topic_id = 1;
    // The active sub topic ID when the event is logged.
    int32 sub_topic_id = 2;
  }

  // Represents the event context for interacting with a card within an exploration.
  message CardContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationDetailsContext exploration_details = 1;

    // The ID of skill to which this exploration is associated.
    string skill_id = 3;
  }

  // Represents the event context for a hint related event within an exploration.
  message HintContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationDetailsContext exploration_details = 1;

    // Corresponds to the index of a hint or solution in a state. Help Index is used to determine which
    // hints can be shown, have been seen, whether the solution can be shown and whether the solution has
    // been seen. For events tracking:
    // - offering a hint, this index should be of type = next_available_hint_index.
    // - accessing a hint, this index should be of type = latest_revealed_hint_index.
    // - offering a solution, this index should be of type = show_solution.
    // - accessing a solution, this index should be of type = everything_revealed.
    string hint_index = 3;
  }

  // Represents the event context for submitting an answer within an exploration.
  message SubmitAnswerContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationDetailsContext exploration_details = 1;

    // Whether the answer that the learner submitted is the correct answer.
    bool is_answer_correct = 3;
  }

  // Represents the event context for playing a voiceover within an exploration.
  message PlayVoiceOverContext {
    // Defined attributes that are common among other exploration related event log contexts.
    ExplorationDetailsContext exploration_details = 1;

    // The content id of the voiceover recording being played.
    string content_id = 3;
  }

  // Represents event context which contains learner-specific details that are logged with every event.
  message LearnerDetailsContext {
    // The learner id of the current user. This id is profile-specific.
    string learner_id = 1;

    // The device id of the current device. This id is common across all profiles.
    string device_id = 2;
  }

  // Represents the event context for all exploration related events containing learner-specific and
  // exploration-specific details.
  message ExplorationDetailsContext {
    // The session id of the current learning session.
    string session_id = 1;

    // The ID of the exploration.
    string exploration_id = 2;

    // The version of the exploration.
    string exploration_version = 3;

    // The name of the current state of the exploration.
    string state_name = 4;

    // Defined attributes that are common among all event log contexts.
    LearnerDetailsContext learner_details = 5;
  }

  // Supported event actions for event logging.
  enum EventAction {
    // The undefined user action of an event.
    EVENT_ACTION_UNSPECIFIED = 0;

    // Opening of home activity.
    OPEN_HOME = 1;

    // Opening of info tab under topic activity.
    OPEN_INFO_TAB = 2;

    // Opening of lessons tab under topic activity.
    OPEN_LESSONS_TAB = 3;

    // Opening of practice tab under topic activity.
    OPEN_PRACTICE_TAB = 4;

    // Opening of revision tab under topic activity.
    OPEN_REVISION_TAB = 5;

    // Opening of story activity.
    OPEN_STORY_ACTIVITY = 6;

    // Opening of exploration activity.
    OPEN_EXPLORATION_ACTIVITY = 7;

    // Opening of question player.
    OPEN_QUESTION_PLAYER = 8;

    // Opening of concept card.
    OPEN_CONCEPT_CARD = 9;

    // Opening of revision card.
    OPEN_REVISION_CARD = 10;

    // Opening of profile chooser activity.
    OPEN_PROFILE_CHOOSER = 11;

    // Starting an exploration card.
    START_CARD = 12;

    // Ending an exploration card.
    END_CARD = 13;

    // Offering a hint when it becomes available.
    HINT_OFFERED = 14;

    // Accessing a hint.
    ACCESS_HINT = 15;

    // Accessing a solution.
    ACCESS_SOLUTION = 16;

    // Offering a solution when it becomes available.
    SOLUTION_OFFERED = 17;

    // Submitting an answer.
    SUBMIT_ANSWER = 18;

    // Playing a voice over.
    PLAY_VOICE_OVER = 19;

    // Backgrounding of the application.
    APP_IN_BACKGROUND = 20;

    // Foregrounding of the application.
    APP_IN_FOREGROUND = 21;

    // Exiting an exploration.
    EXIT_EXPLORATION = 22;

    // Finishing an exploration.
    FINISH_EXPLORATION = 23;

    // Resuming an exploration.
    RESUME_EXPLORATION = 24;

    // Starting over an exploration.
    START_OVER_EXPLORATION = 25;

    // Deleting a profile.
    DELETE_PROFILE = 26;
  }

  // Supported priority of events for event logging
  enum Priority {
    // The undefined priority of an event
    PRIORITY_UNSPECIFIED = 0;
    // The priority of events whose logs should not be removed from the storage on most occasions
    // but can be removed if they're the only ones there and size limit exceeds.
    ESSENTIAL = 1;
    // The priority of events whose logs can be removed from the storage if the size exceeds a certain limit
    OPTIONAL = 2;
  }
}

// Structure for an exception log.
message ExceptionLog {
  // The UTC timestamp of the exception in millis.
  int64 timestamp_in_millis = 1;
  // The stacktrace of the exception explaining what went wrong
  repeated StackTraceElement stacktrace_element = 2;
  // The message explaining what failed at the site the exception was thrown.
  string message = 3;
  // The cause of the exception which in itself is a throwable.
  ExceptionLog cause = 4;
  // The type of exception indicating how that exception affected the application.
  ExceptionType exception_type = 5;

  enum ExceptionType {
    // The undefined exception type.
    EXCEPTION_TYPE_UNSPECIFIED = 0;
    // Indicates an exception that caused the application to close.
    FATAL = 1;
    // Indicates an exception that was not fatal to the application and could be recovered from.
    NON_FATAL = 2;
  }

  // Structure of the stacktrace element of an exception.
  message StackTraceElement {
    // The name of the class where the exception occurred.
    string declaring_class = 1;
    // The name of the method due to which that exception occurred.
    string method_name = 2;
    // The name of the file containing the execution point of the exception.
    string file_name = 3;
    // The line number of the source code where exception took place.
    int32 line_number = 4;
  }
}

// Structure for a container that contains event log reports.
message OppiaEventLogs {
  repeated EventLog event_log = 1;
}

// Structure for a container that contains exception log reports.
message OppiaExceptionLogs {
  repeated ExceptionLog exception_log = 1;
}
